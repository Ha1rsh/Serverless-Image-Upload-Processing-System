service: serverless-image-upload-processing

frameworkVersion: "3"

# Disable Serverless Dashboard / login prompts
org: null
app: null

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-south-1
  memorySize: 1024
  timeout: 30
  environment:
    ORIGINALS_BUCKET: ${self:service}-originals-${sls:stage}
    PROCESSED_BUCKET: ${self:service}-processed-${sls:stage}
    META_TABLE: ${self:service}-meta-${sls:stage}
    VARIANT_WIDTHS: "200,800"

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${self:provider.environment.ORIGINALS_BUCKET}
            - arn:aws:s3:::${self:provider.environment.ORIGINALS_BUCKET}/*
            - arn:aws:s3:::${self:provider.environment.PROCESSED_BUCKET}
            - arn:aws:s3:::${self:provider.environment.PROCESSED_BUCKET}/*
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.META_TABLE}

functions:
  getUploadUrl:
    handler: src/upload/handler.handler
    events:
      - httpApi:
          method: POST
          path: /upload-url

  imageProcessor:
    handler: src/processImage/handler.handler
    events:
      - s3:
          bucket: ${self:provider.environment.ORIGINALS_BUCKET}
          event: s3:ObjectCreated:Put
          existing: true
          rules:
            - suffix: .jpg
      - s3:
          bucket: ${self:provider.environment.ORIGINALS_BUCKET}
          event: s3:ObjectCreated:Put
          existing: true
          rules:
            - suffix: .jpeg
      - s3:
          bucket: ${self:provider.environment.ORIGINALS_BUCKET}
          event: s3:ObjectCreated:Put
          existing: true
          rules:
            - suffix: .png

resources:
  Resources:
    OriginalsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ORIGINALS_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: ["GET", "PUT", "POST"]
              AllowedOrigins: ["*"]
              MaxAge: 3000
    ProcessedBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PROCESSED_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: ["GET"]
              AllowedOrigins: ["*"]
              MaxAge: 3000
    MetaTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.META_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
